version: '3.8'

services:
  backend:
    extends:
      file: docker-compose.yml
      service: backend
    environment:
      - NODE_ENV=production
      - PROD=true
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2'
          memory: 2G
    networks:
      - backend-network
      - monitoring-network

  db:
    extends:
      file: docker-compose.yml
      service: db
    volumes:
      - postgres-prod-data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G

  redis:
    extends:
      file: docker-compose.yml
      service: redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-prod-data:/data

  kali:
    extends:
      file: docker-compose.yml
      service: kali
    security_opt:
      - apparmor:unconfined
      - seccomp:unconfined
    cap_add:
      - NET_ADMIN
      - SYS_ADMIN
    networks:
      - isolated-test
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - frontend-network
      - backend-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=https://api.yourdomain.com
    environment:
      - NODE_ENV=production
    networks:
      - frontend-network

networks:
  backend-network:
    driver: bridge
    internal: false
  frontend-network:
    driver: bridge
    internal: false
  monitoring-network:
    driver: bridge
    internal: false
  isolated-test:
    driver: bridge
    internal: true
    driver_opts:
      com.docker.network.bridge.enable_icc: "false"

volumes:
  postgres-prod-data:
  redis-prod-data: 